#include "imports/common/stdlib.fc";
#include "imports/vote/vote_constants.fc";
#include "imports/vote/vote_utils.fc";

;; const int const::min_to_vote = 1000000000; ;; 1 TON
const int const::min_to_vote = 10000000; ;; 0.01 TON
const int const::min_for_storage = 60000000; ;; 0.06
const int const::min_for_deploy_vote = 10000000; ;; 0.01

;; storage variables
global int storage::votes_count;
global int storage::time_when_finish;
global int storage::result;
global slice storage::initiator_addr;
global slice storage::winner_addr;
global cell storage::project_name;
global cell storage::votes;

() load_data() impure {
    var ds = get_data().begin_parse();

    storage::votes_count = ds~load_uint(32);
    storage::time_when_finish = ds~load_int(32);
    storage::initiator_addr = ds~load_msg_addr();
    storage::project_name = ds~load_ref();
    storage::votes = slice_empty?(ds) ? new_dict() : ds~load_dict();
    storage::result = ds~load_uint(32);
    storage::winner_addr = ds~load_msg_addr();
    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
                    .store_uint(storage::votes_count, 32)
                    .store_int(storage::time_when_finish, 32)
                    .store_slice(storage::initiator_addr)
                    .store_ref(storage::project_name)
                    .store_dict(storage::votes)
                    .store_uint(storage::result, 32)
                    .store_slice(storage::winner_addr)
                    .end_cell()
    );
}

;; 'Already voted'
builder store_voted_text(builder b) inline {
    return b.store_uint(5183393240786912077281565631844, 104);
}

() check_the_result() impure {
    int mask = 256; ;; Độ dài key là 32-bit (hoặc thay đổi cho phù hợp với cấu trúc của bạn)

    (int key, slice vote_data, int status) = storage::votes.udict_get_min?(mask);  ;; Key ban đầu, sử dụng giá trị nhỏ nhất
    ;; Vòng lặp qua tất cả các phần tử trong dictionary
    while (status < 0) {
        ;; Sử dụng `udict_get_next` để lấy phần tử tiếp theo trong dictionary
        (key, vote_data, status) = storage::votes.udict_get_next?(mask, key);
        ;; Kiểm tra xem có phần tử tiếp theo không
        if (key) { ;; Nếu không còn phần tử nào thì dừng
            int vote = vote_data~load_uint(32);
            int count = vote_data~load_coins();
            if(vote == storage::result) {
                storage::winner_addr = vote_data~load_msg_addr();
                status = 0; ;; break
            }
        }
    }
}

() decrease_vote() impure {
    if(storage::votes_count > 1) {
        storage::votes_count -= 1;
    }
}

() increase_vote(slice user_addr, int vote, int value) impure {
    storage::votes_count += 1;
    (cell new_votes, int status) = storage::votes.udict_add_builder?(256, user_addr~load_uint(256), begin_cell()
        .store_uint(vote, 32)
        .store_coins(value)
        .store_slice(user_addr));
    storage::votes = new_votes;
}


() on_bounce(int msg_value, slice in_msg_body) impure {
    in_msg_body~skip_bits(32);
    load_data();
    decrease_vote();
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; all bounced messages
        on_bounce(msg_value, in_msg_body);
        return ();
    }
    throw_unless(error::not_enough_funds, msg_value >= const::min_to_vote);
    load_data();

    slice from_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    if (equal_slices(storage::initiator_addr, from_addr)) {
        if (op == op::take_commission) {
            int commission = my_balance - const::min_for_storage;
            send_text_msg(from_addr, commission, 1, begin_cell().store_uint(8390880524967965285, 64));
            return ();
        }
        if(op == op::set_result) {
            int result = in_msg_body~load_uint(32);
            ~dump(result);
            storage::result = result;
            check_the_result();
            save_data();
            return ();
        }
    }

    throw_if(error::voting_finished, (storage::time_when_finish > 0) & (storage::time_when_finish > now())); ;; time is over
    ;; new vote
    if (op == op::vote) {
        int vote = parse_vote_msg(in_msg_body);
        increase_vote(from_addr, vote, msg_value);
        save_data();
        if (const::min_for_storage > my_balance) {
            msg_value -= const::min_for_storage;
        }
        return ();
    }

    ;; claim
    if(op == op::claim) {
        if(equal_slices(from_addr,storage::winner_addr)) {
            send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(from_addr)
            .store_coins(my_balance)
            .store_uint(0, 107) ;; default message headers (see sending messages page)
            .store_uint(0, 32) ;; response operation code
            .end_cell(), 64);
            return();
        }
        throw(error::looser);
    }

    throw(error:unknown_op);
}

;; get votes
(int, cell) get_votes() method_id {
    load_data();
    return (storage::votes_count, storage::votes);
}

(int, int, slice) is_finished() method_id {
    load_data();
    return ((storage::time_when_finish > 0) & (storage::time_when_finish > now()), storage::result, storage::winner_addr);
}

(int, int) get_my_vote(slice user_addr) method_id {
    load_data();
    (slice vote_data, int success) = storage::votes.udict_get?(256, user_addr~load_uint(256));
    if (success) {
        int vote = vote_data~load_uint(32);
        int value = vote_data~load_coins();
        return (vote, value);
    }
    return (0, 0);
}

(slice) get_project_name() method_id {
    load_data();
    return storage::project_name.begin_parse();
}
