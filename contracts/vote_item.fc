#include "imports/common/stdlib.fc";
#include "imports/vote/vote_constants.fc";
#include "imports/vote/vote_utils.fc";

const int const::min_for_storage = 10000000; ;; 0.01

;; storage
global slice storage::user_addr;
global slice storage::vote_addr;
global int storage::user_vote;

() load_data() impure {
    var ds = get_data().begin_parse();

    storage::user_addr = ds~load_msg_addr();
    storage::vote_addr = ds~load_msg_addr();
    storage::user_vote = ds~load_uint(32);
}

() save_data() impure {
    set_data(pack_data(storage::user_addr, storage::vote_addr, storage::user_vote));
}

() change_my_vote_msg(int msg_value, int prev_vote) impure {
    var body = begin_cell()
            .store_uint(op::change_vote, 32)
            .store_slice(storage::user_addr)
            .store_uint(prev_vote, 32)
            .store_uint(storage::user_vote, 32)
        .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(storage::vote_addr)
            .store_coins(msg_value)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(body)
            .end_cell();

    send_raw_message(msg, 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    load_data();
    slice from_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    ~dump(op);
    ;; init action
    if (equal_slices(storage::vote_addr, from_addr)) {
        if(op == op::vote) {
            storage::user_vote = in_msg_body~load_uint(32);
            save_data();
            return ();
        }
    }

    if (msg_value < const::min_for_storage) {
        throw(error::not_enough_funds);
    }

    ;; actiion for change vote from User
    if (equal_slices(storage::user_addr, from_addr)) {
        if (op == op::vote) {
            int prev_vote = storage::user_vote;
            storage::user_vote = parse_vote_msg(in_msg_body);
            save_data();

            if (storage::user_vote != prev_vote) {
                [int balance, cell extra] = get_balance();
                if (balance < const::min_for_storage) {
                    msg_value = msg_value - const::min_for_storage;
                }
                change_my_vote_msg(msg_value, prev_vote);
            }

            return ();
        }
        if(op == op::check_result) {
            ~strdump("CHECK_RESULT");
            cell body = begin_cell()
            .store_uint(op::check_result, 32)
            .store_uint(storage::user_vote, 32)
            .store_slice(storage::user_addr)
            .end_cell();
            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(storage::vote_addr)
                .store_coins(const::min_for_storage)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(body)
            ;

            send_raw_message(msg.end_cell(), 1);
            return();
        }
    }

    throw(error:unknown_op);
}

(int) get_my_vote() method_id {
    load_data();
    return storage::user_vote;
}

;; get main addr
(slice) get_main_addr() method_id {
    load_data();
    return storage::vote_addr;
}
