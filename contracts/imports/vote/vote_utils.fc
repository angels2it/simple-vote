cell pack_data(slice user_addr, slice main_addr, int vote) inline {
    return begin_cell()
            .store_slice(user_addr)
            .store_slice(main_addr)
            .store_uint(vote, 32)
        .end_cell();
}

cell calculate_state_init(cell data, cell code) inline {
    return begin_cell()
            .store_uint(0, 2)
            .store_dict(code)
            .store_dict(data)
            .store_uint(0, 1)
            .end_cell();
}

slice calculate_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
            .store_int(0, 8) ;; workchain
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

slice calculate_vote_address(slice user_addr, slice main_addr, cell code) inline {
    cell data = pack_data(user_addr, main_addr, 0);
    return calculate_address(calculate_state_init(data, code));
}

int parse_vote_msg(slice msg) inline {
    ;; Khởi tạo biến lưu trữ kết quả
    int result = 0;

    ;; Lặp qua từng ký tự trong chuỗi
    while (msg.slice_bits() > 0) {
        ;; Lấy ký tự đầu tiên trong slice dưới dạng mã ASCII
        int char = msg~load_uint(8);  ;; Mỗi ký tự là 1 byte (8 bit)

        ;; Kiểm tra xem ký tự có phải là số không (từ '0' = 48 đến '9' = 57)
        if ((char >= 48) & (char <= 57)) {
            ;; Tính giá trị của chữ số và cộng dồn vào kết quả
            result = result * 10 + (char - 48);
        } else {
            return 0;
        }
    }

    return result;
}

() send_text_msg(slice to_addr, int value, int mode, builder content) impure {
    var body = begin_cell()
            .store_uint(0, 32)
            .store_builder(content)
            .end_cell();

    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(to_addr)
            .store_coins(value)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(body)
            .end_cell();

    send_raw_message(msg, mode);
}